#!/usr/bin/env bash

set -x              # Print command traces before executing command
trap 'exit 1' ERR   # Exit script with error if command fails

cd $(dirname "${BASH_SOURCE[0]}")

if [[ -z $(which docker) ]]; then
    echo "Missing docker client which is required for building, testing and pushing."
    exit 2
fi


declare IMAGE_NAME="bachelorthesis/jenkins"


function build {
    version="${1}"
    
    if [ "$version" = "master" ]; then
        docker build -t "${IMAGE_NAME}:latest" master
        docker build -t "${IMAGE_NAME}:master" master
    
    elif [ "$version" = "slave" ]; then
        docker build -t "${IMAGE_NAME}:slave" slave

    else
        echo "$version does not exist."
        exit 2
    fi
}


function test {
    version="${1}"

    docker history "${IMAGE_NAME}:${version}" 2> /dev/null

    if [ $? -eq 1 ]; then
        echo "Cant test ${IMAGE_NAME}:${version}, the image does not exist."
        exit 2
    fi

    if [[ -z $(which bats) ]]; then
        echo "Missing bats, which is required for testing."
        exit 2
    fi

    bats "test/jenkins-${version}.bats"
}


function push {
    version="${1}"

    docker history "${IMAGE_NAME}:${version}" 2> /dev/null

    if [ $? -eq 1 ]; then
        echo "Cant push ${IMAGE_NAME}:${version}, the image does not exist."
        exit 2
    fi

    [ -z "$DOCKER_EMAIL" ]    && { echo "Need to set DOCKER_EMAIL";    exit 1; }
    [ -z "$DOCKER_USER" ]     && { echo "Need to set DOCKER_USER";     exit 1; }
    [ -z "$DOCKER_PASSWORD" ] && { echo "Need to set DOCKER_PASSWORD"; exit 1; }

    if [[ $EUID -ne 0 ]]; then
        sudo docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASSWORD
        sudo docker push "${IMAGE_NAME}:${version}"

        if [ "$version" = "master" ]; then
            sudo docker push "${IMAGE_NAME}:latest" master
        fi

    else
        docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASSWORD
        docker push "${IMAGE_NAME}:${version}"

        if [ "$version" = "master" ]; then
            sudo docker push "${IMAGE_NAME}:latest" master
        fi
    fi

}


#
# Handle input
#

versions=()
actions=("$@")

while getopts ":v:" opt; do
  case $opt in
    v)
      versions+=("$OPTARG")
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      ;;
  esac
done

if [ ${#versions[@]} -eq 0 ]; then
    versions+=(master)
    versions+=(slave)
fi

if [ ${#actions[@]} -eq 0 ]; then
    actions=(build test push)
fi

for action in "${actions[@]}"; do 
    case "$action" in
        build)
            for version in "${versions[@]}"; do
               build $version
            done
            ;;
         
        test)
            for version in "${versions[@]}"; do
               test $version
            done
            ;;

        push)
            for version in "${versions[@]}"; do
               push $version
            done
            ;;
    esac
done